1、ajax是什么？
    异步的js和xml

    AJAX = Asynchronous JavaScript And XML.

    AJAX 并非编程语言。

    AJAX 仅仅组合了：

    浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）
    JavaScript 和 HTML DOM（显示或使用数据）
    Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。

    Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面

    不刷新页面更新网页
    在页面加载后从服务器请求数据
    在页面加载后从服务器接收数据
    在后台向服务器发送数据


    

2、异步交互和同步交互
    同步：
        发送一个请求，就要等待服务器的响应，然后才能发不第二个请求，中间就一个字“卡”
        刷新整个页面
    异步：
        发一个请求后，无需等待服务器的响应，便可以发送第二个请求
        可以使用js服务器的响应，然后使用js来局部刷新

2、对象：
    XMLHttpRequest 对象方法：
        new XMLHttpRequest()	    创建新的 XMLHttpRequest 对象
        abort()	                    取消当前请求
        getAllResponseHeaders()	    返回头部信息
        getResponseHeader()	        返回特定的头部信息
        open(method, url, async, user, psw)
        规定请求：
            method：请求类型 GET 或 POST
            url：文件位置
            async：true（异步）或 false（同步）
            user：可选的用户名称
            psw：可选的密码
        send()	                    将请求发送到服务器，用于 GET 请求
        send(string)	            将请求发送到服务器，用于 POST 请求
        setRequestHeader()	        向要发送的报头添加标签/值对

    XMLHttpRequest 对象属性：
        onreadystatechange	        定义当 readyState 属性发生变化时被调用的函数
        readyState                  保存 XMLHttpRequest 的状态。
            0：请求未初始化
            1：服务器连接已建立
            2：请求已收到
            3：正在处理请求
            4：请求已完成且响应已就绪
        responseText	            以字符串返回响应数据
        responseXML	                以 XML 数据返回响应数据
        status                      返回请求的状态号
            200: "OK"
            403: "Forbidden"
            404: "Not Found"
        statusText	                返回状态文本（比如 "OK" 或 "Not Found"）

3、发送异步请求

   3.1 得到XMLHttpRequest（只需要学习一个对象XMLHttpRequest）：
        大多数浏览器都支持：var xmlHttp = new XMLHttpRequest();
   编写创建XMLHttpRequest对象的函数：
        function creatXMLHttpRequest(){
            try{
                return new XMLHttpRequest();
            }catch(e){
                try{
                    return new ActiveXObject("Msxml2.XMLHTTP");//IE6.0
                }catch(e){
                    try{
                        return new ActiveXObject("Microsoft.XMLHTTP");//IE5.5更早
                    }catch(e){
                        alert("你用的是什么浏览器！");
                        throw e;
                    }
                }
            }
        }
    3.2 打开与服务器的连接
    xmlHttp.open(): 用来打开与服务器的连接，需要三个参数
        请求方式：可以使get或post
        请求的URL：指定的服务器资源
        请求是否为异步：true--发送异步请求 否则同步
            xmlHttp.open("GET","服务器路径",true);


    3.3 发送请求
        xmlHttp.send(null): 如果不给可能会造成部分浏览器无法发送
            参数就是请求内容！如果是GET，必须给出null

    3.4
        xmlHttp对象的一个事件上注册一个监听器：onreadystatechange
            xmlHttp的5个状态：
                        0：请求未初始化
                        1：服务器连接已建立
                        2：请求已收到
                        3：正在处理请求
                        4：请求已完成且响应已就绪

            得到xmlHttp状态：
                var state = xmlHttp.readyState;
            得到服务器响应的状态码：
                var status = xmlHttp.status;
            得到服务器响应的内容：
                xmlHttp.responseText	            以字符串返回响应数据
                xmlHttp.responseXML	                以 XML 数据返回响应数据

        xmlHttp.onreadystatechange = function () {
            if(xmlHttp.readyState == 4 && xmlHttp.status == 200){//双重判断是否为4，是否为200
                //获取服务器响应内容
                var text = xmlHttp.responseText	;
            }
        };
        java.atweb.servlet

        src/main/java/com/avaweb_ajax/avawed_ajaxtest/index.html

        src/main/java/com/avaweb_ajax/AServlet.java

发送POST请求：
    open: xmlHttp.open("POST" ....);
    添加一步：设置ContentType请求头
        xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
    send:
        xmlHttp.send("username=zhangsang&password=123");

注册表单之校验用户是否注册

响应内容为xml数据
    响应头：ContentType--值为：text/xml;charset=utf-8
    客户端：
        var doc = xmlHttp.responseXML;

